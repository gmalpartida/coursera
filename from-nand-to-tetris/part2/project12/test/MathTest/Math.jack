// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
		var int i, j;
		let n = 16;
		let i = 0;
		let powersOfTwo = Array.new(n);
		let j = 1;
		while (i < n)
		{
			let powersOfTwo[i] = j;
			let j = j + j;
			let i = i + 1;
		}
		return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
		var int sum, xShifted, i;

		let sum = 0;
		let xShifted = x;
		let i = 0;

		while (i < n)
		{
			if (~((powersOfTwo[i] & y) = 0))
			{
				let sum = sum + xShifted;
			}
			let xShifted = xShifted + xShifted;
			let i = i + 1;
		}
		return sum;
    }

	/* helper function to divide two positive integers
	function divide_unsigned(N, D)
  		Q := 0; R := N
		  while R ≥ D do
			Q := Q + 1
	    	R := R − D
  			end
		  return (Q, R)
	end
*/
	function int divide_unsigned(int N, int D)
	{
		var int Q, R;
		let Q = 0;
		let R = N;
		while (~(R < D))
		{
			let Q = Q + 1;
			let R = R - D;
		}
		return Q;
	}

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int N, int D) 
	{
	/*
		function divide(N, D)
			if D = 0 then error(DivisionByZero) end
			if D < 0 then (Q, R) := divide(N, −D); return (−Q, R) end
			if N < 0 then
				(Q,R) := divide(−N, D)
			 	if R = 0 then return (−Q, 0)
				else return (−Q − 1, D − R) end
  			end
			-- At this point, N ≥ 0 and D > 0
		 	return divide_unsigned(N, D)
		end  
	*/
		if (D = 0)
		{
			do Sys.error(0);
			do Sys.halt();
		}
		if (D < 0)
		{
			return Math.divide(N, Math.abs(D)) * -1;
		}
		if (N < 0)
		{
			return Math.divide(Math.abs(N), D) * -1;
		}
		return Math.divide_unsigned(N, D);

	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, j, m;

		let y = 0;
		let j = (n / 2) - 1;

		while (~(j < 0))
		{	
			let m = (y + powersOfTwo[j]) * ( y + powersOfTwo[j]);
			if (~(m > x) & (m > 0))
			{
				let y = (y + powersOfTwo[j]);
			}

			let j = j - 1;
		}
		return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
		var int result;
		let result = a;
		if (b > a)
		{
			let result = b;
		}
		return result;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
		var int result;
		let result = a;
		if (a > b)
		{
			let result = b;
		}
		return result;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		var int result;
		let result = x;
		if (result < 0)
		{
			let result = result - result - result;
		}
		return result;
    }
}



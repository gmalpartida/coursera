<class>
	<keyword>class</keyword>
	<identifier>Main</identifier>
	<symbol>{</symbol>
	<subroutineDec>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<identifier>main</identifier>
		<symbol>(</symbol>
		<parameterList>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<varDec>
				<keyword>var</keyword>
				<identifier>Array</identifier>
				<identifier>a</identifier>
				<symbol>;</symbol>
			</varDec>
			<varDec>
				<keyword>var</keyword>
				<keyword>int</keyword>
				<identifier>length</identifier>
				<symbol>;</symbol>
			</varDec>
			<varDec>
				<keyword>var</keyword>
				<keyword>int</keyword>
				<identifier>i</identifier>
				<symbol>,</symbol>
				<identifier>sum</identifier>
				<symbol>;</symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword>let</keyword>
					<identifier>length</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>Keyboard</identifier>
							<symbol>.</symbol>
							<identifier>readInt</identifier>
							<symbol>(</symbol>
							<expressionList>
								<expression>
									<term>
										<stringConstant>HOW MANY NUMBERS? </stringConstant>
									</term>
								</expression>
							</expressionList>
							<symbol>)</symbol>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>a</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
							<identifier>Array</identifier>
							<symbol>.</symbol>
							<identifier>new</identifier>
							<symbol>(</symbol>
							<expressionList>
								<expression>
									<term>
push local 1
									</term>
								</expression>
							</expressionList>
							<symbol>)</symbol>
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>i</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
push constant 0
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<whileStatement>
					<keyword>while</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
push local 2
						</term>
						<term>
push local 1
						</term>
<
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>a</identifier>
							<symbol>[</symbol>
							<expression>
								<term>
push local 2
								</term>
							</expression>
							<symbol>]</symbol>
							<symbol>=</symbol>
							<expression>
								<term>
									<identifier>Keyboard</identifier>
									<symbol>.</symbol>
									<identifier>readInt</identifier>
									<symbol>(</symbol>
									<expressionList>
										<expression>
											<term>
												<stringConstant>ENTER THE NEXT NUMBER: </stringConstant>
											</term>
										</expression>
									</expressionList>
									<symbol>)</symbol>
								</term>
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>i</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
push local 2
								</term>
								<term>
push constant 1
								</term>
+
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</whileStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>i</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
push constant 0
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<letStatement>
					<keyword>let</keyword>
					<identifier>sum</identifier>
					<symbol>=</symbol>
					<expression>
						<term>
push constant 0
						</term>
					</expression>
					<symbol>;</symbol>
				</letStatement>
				<whileStatement>
					<keyword>while</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
push local 2
						</term>
						<term>
push local 1
						</term>
<
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<letStatement>
							<keyword>let</keyword>
							<identifier>sum</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
push local 3
								</term>
								<term>
									<identifier>a</identifier>
									<symbol>[</symbol>
									<expression>
										<term>
push local 2
										</term>
									</expression>
									<symbol>]</symbol>
								</term>
+
							</expression>
							<symbol>;</symbol>
						</letStatement>
						<letStatement>
							<keyword>let</keyword>
							<identifier>i</identifier>
							<symbol>=</symbol>
							<expression>
								<term>
push local 2
								</term>
								<term>
push constant 1
								</term>
+
							</expression>
							<symbol>;</symbol>
						</letStatement>
					</statements>
					<symbol>}</symbol>
				</whileStatement>
				<doStatement>
					<keyword>do</keyword>
						<identifier>Output</identifier>
						<symbol>.</symbol>
						<identifier>printString</identifier>
						<symbol>(</symbol>
						<expressionList>
							<expression>
								<term>
									<stringConstant>THE AVERAGE IS: </stringConstant>
								</term>
							</expression>
						</expressionList>
						<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<doStatement>
					<keyword>do</keyword>
						<identifier>Output</identifier>
						<symbol>.</symbol>
						<identifier>printInt</identifier>
						<symbol>(</symbol>
						<expressionList>
							<expression>
								<term>
push local 3
								</term>
								<term>
push local 1
								</term>
/
							</expression>
						</expressionList>
						<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<doStatement>
					<keyword>do</keyword>
						<identifier>Output</identifier>
						<symbol>.</symbol>
						<identifier>println</identifier>
						<symbol>(</symbol>
						<expressionList>
						</expressionList>
						<symbol>)</symbol>
					<symbol>;</symbol>
				</doStatement>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>test</identifier>
		<symbol>(</symbol>
		<parameterList>
			<keyword>int</keyword>
			<identifier>int1</identifier>
			<symbol>,</symbol>
			<keyword>char</keyword>
			<identifier>char1</identifier>
			<symbol>,</symbol>
			<identifier>Class</identifier>
			<identifier>class1</identifier>
		</parameterList>
		<symbol>)</symbol>
		<subroutineBody>
			<symbol>{</symbol>
			<statements>
				<returnStatement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</returnStatement>
			</statements>
			<symbol>}</symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol>}</symbol>
</class>

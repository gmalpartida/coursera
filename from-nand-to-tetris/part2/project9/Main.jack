class Main
{
	function void main()
	{
        var CityMap Cities;
        var AdjList Graph;
		var Array Prev, Distance;
		var int source;
		var Menu menu;

		let source = 5;
        
        let Cities = Main.BuildCities();

		let Graph = Main.BuildGraph(Cities.get_num_cities());
/*
		let Prev = Array.new(Cities.get_num_cities());
		let Distance = Array.new(Cities.get_num_cities());

		do Main.Dijkstra(Graph, Cities, source, Prev, Distance);

		do Main.printDistances(source, Distance, Cities);
*/

		let menu = Menu.new(Cities);

		do menu.show();

		return;
	
	}

	function boolean is_Q_empty(Array Q, int num_vertices)
	{
		var boolean result;
		var int index;

		let result = true;
		let index = 0;
		
		while (index < num_vertices)
		{
			if ((Q[index] = true))
			{
				let result = false;
				return result;
			}
			let index = index + 1;
		}

		return result;
	}

	function int vertex_with_minimum_distance(Array Q, Array Distance, int num_vertices)
	{
		var int vertex;
		var int dist;
		var int index;

		let vertex = 0;
		let dist = 32767;
		let index = 0;

		while (index < num_vertices)
		{
			if (Q[index] & (Distance[index] < dist))
			{
				let dist = Distance[index];
				let vertex = index;
			}

			let index = index + 1;
		}
		
		return vertex;
	}

	function void Dijkstra(AdjList Graph, CityMap Cities, int source, Array Prev, Array Distance)
	{
		var int vertex;
		var Array Q;
		var int num_cities;
		var int u;
		var LinkedList edges;
		var LinkedList cur;
		var int alt;
		var int v;
		var NodeData data;

		let vertex = 0;
		let num_cities = Cities.get_num_cities();
		let Q = Array.new(num_cities);
		let alt = 0;

		while (vertex < num_cities)
		{
			let Distance[vertex] = 32767;
			let Prev[vertex] = null;
		
			let Q[vertex] = true;

			let vertex = vertex + 1;
			
		}
		let Distance[source] = 0;

		while (~(Main.is_Q_empty(Q, num_cities) = true))
		{
			let u = Main.vertex_with_minimum_distance(Q, Distance, num_cities);
			let Q[u] = false;
					let edges = Graph.get_edges(u);
			let cur = edges;

			while (~(cur = null))
			{
				let data = cur.getData();
				let v = data.get_id();
				if (Q[v])
				{
					let alt = Distance[u] + data.get_weight(); 
					
					if (alt < Distance[v])
					{
						
						let Distance[v] = alt;
						let Prev[v] = u;
					}

				}
				let cur = cur.getNext();
			}

		}
       return;
	}

	function CityMap BuildCities()
	{
		var int num_cities;
		var CityMap Cities;

		let num_cities = 6;
		let Cities = CityMap.new(num_cities);

	    do Cities.add("New York");
        do Cities.add("Los Angeles");
        do Cities.add("Boston");
        do Cities.add("Houston");
        do Cities.add("Des Moines");
		do Cities.add("Chicago");

		return Cities;
	}

	function AdjList BuildGraph(int num_cities)
	{
		var AdjList Graph;
		var NodeData data;

        let Graph = AdjList.new(num_cities);
        
        let data = NodeData.new(1, 2789);
        do Graph.add_edge(0, 1, data);

        let data = NodeData.new(2, 214);
        do Graph.add_edge(0, 2, data);

        let data = NodeData.new(3, 1627);
        do Graph.add_edge(0, 3, data);
        
        let data = NodeData.new(4, 1107);
        do Graph.add_edge(0, 4, data);

        let data = NodeData.new(5, 790);
        do Graph.add_edge(0, 5, data);

		let data = NodeData.new(5, 983);
		do Graph.add_edge(2, 5, data);

		let data = NodeData.new(5, 332);
		do Graph.add_edge(4, 5, data);

		let data = NodeData.new(4, 935);
		do Graph.add_edge(3, 4, data);


		return Graph;
	}

	function void printDistances(int source, Array Distance, CityMap Cities)
	{
		var int vertex;
		var int num_cities;

		let num_cities = Cities.get_num_cities();
		let vertex = 0;

		do Output.printString("distance from ");
		do Output.printString(Cities.get_name(source));
		do Output.printString(": ");
		do Output.println();

		while (vertex < num_cities)
		{
			if (~(source = vertex))
			{
				do Output.printString(" to ");
				do Output.printString(Cities.get_name(vertex));
				do Output.printString(" (");
				do Output.printInt(Distance[vertex]);
				do Output.printString(")");
			}
			let vertex = vertex + 1;
		}
		return;
	}
}




